{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "따릉이_알고리즘.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "oV_nP9SlARpb"
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "df = pd.read_csv('/content/drive/MyDrive/날씨-따릉이 데이터/final_dataset_num.csv', encoding='utf-8-sig')\n",
        "df.drop(df.iloc[:,0:1], axis=1, inplace=True)"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g8_jXtQyCDwy",
        "outputId": "2fb2c48f-61ed-4f44-800b-ad4a3998ae61"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['time', 'place', 'temp(°C)', 'rain(mm)', 'wind(m/s)', 'NO2(ppm)',\n",
              "       'ozone(ppm)', 'CO2(ppm)', 'SO2(ppm)', 'dust', 'micro dust', 'rent_num'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6pYdCCfdC8pG"
      },
      "source": [
        "Y = df['rent_num'].values\n",
        "X = df.drop(['rent_num','time', 'place'], axis=1).values"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "80akCklLoY4J"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HbMMolLuEqhD"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dgsAx6uYEu8c"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.fit_transform(X_test)\n",
        "# Y_train = sc.fit_transform(Y_train)\n",
        "# Y_test = sc.fit_transform(Y_test)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G1LF-_6U8R3u"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rova4MaFD1Xp"
      },
      "source": [
        "MinMaxScaler"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mcS_3lIGffu-",
        "outputId": "9b3c99ae-dc98-4fc9-a7aa-298bf477b022"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "# separately scale the input and output variables\n",
        "scale_x = MinMaxScaler()\n",
        "X = scale_x.fit_transform(X)\n",
        "scale_y = MinMaxScaler()\n",
        "Y = scale_y.fit_transform(Y.reshape(-1, 1))\n",
        "print(X.min(), X.max(), Y.min(), Y.max())"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0 1.0 0.0 0.9999999999999999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BEp5oSbB5o6b"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.25, random_state=42)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uoh-3iwRbX_r",
        "outputId": "9c526619-a873-4deb-9650-ab5f6d17f45d"
      },
      "source": [
        "# from sklearn.metrics import r2_score\n",
        "# linear_model = KNeighborsRegressor(n_neighbors=50)\n",
        "# linear_model.fit(X_train, y_train)\n",
        "\n",
        "# print(\"테스트 세트 R^2: {:.2f}\".format(linear_model.score(X_test, y_test)))\n",
        "# y_predict = linear_model.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "테스트 세트 R^2: 0.21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "chXlr8JO748i",
        "outputId": "cf0be8b6-3e78-4707-a404-04f29da80d4f"
      },
      "source": [
        "from sklearn.metrics import r2_score, mean_squared_error\n",
        "from sklearn.metrics import r2_score\n",
        "linear_model = LinearRegression()\n",
        "linear_model.fit(X_train, y_train)\n",
        "y_predict = linear_model.predict(X_test)\n",
        "\n",
        "print(\"테스트 세트 R^2: {:.2f}\".format(linear_model.score(X_test, y_test)))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "테스트 세트 R^2: -6.39\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EmqHUyy4QJKa",
        "outputId": "242559a6-abee-4a5f-e82e-37ea1960cc5d"
      },
      "source": [
        "y_test[:11]"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.06615355],\n",
              "       [0.02883866],\n",
              "       [0.35960639],\n",
              "       [0.04920109],\n",
              "       [0.07901403],\n",
              "       [0.07160951],\n",
              "       [0.3900039 ],\n",
              "       [0.08388542],\n",
              "       [0.10853468],\n",
              "       [0.01938815],\n",
              "       [0.15841777]])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NKrC6bIhQUeq",
        "outputId": "b7d74bd9-c2fb-411a-88dd-2e0a1ce31e4b"
      },
      "source": [
        "y_predict[:11]"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.16456308],\n",
              "       [0.08717701],\n",
              "       [0.17087871],\n",
              "       [0.11771872],\n",
              "       [0.16684989],\n",
              "       [0.18971997],\n",
              "       [0.24082664],\n",
              "       [0.13462181],\n",
              "       [0.15666755],\n",
              "       [0.11537481],\n",
              "       [0.18089504]])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0HijN-zIkBSY",
        "outputId": "7e122e3d-4d78-4b49-c001-38ec5f8dadca"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "import numpy as np\n",
        "import math\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import openpyxl\n",
        "plot.rcParams[\"font.family\"] = 'Malgun gothic'\n",
        "\n",
        "\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "\n",
        "for i in (20, 30, 40, 50):\n",
        "  for j in ('uniform', 'distance'):\n",
        "    for k in ('auto','ball_tree','kd_tree','brute'):\n",
        "      model = KNeighborsRegressor(n_neighbors=i, weights=j,algorithm=k)\n",
        "      model.fit(X_train, y_train)\n",
        "      relation_square = model.score(X_test, y_test)\n",
        "      print(f'결정계수 R{i}/{j}/{k}:', relation_square)\n",
        "    print('\\n')\n",
        "  print('\\n')\n",
        "\n",
        "y_p=model.predict(X_test)\n",
        "ax1 = sns.distplot(y_test, hist = False, label = 'y_실제')\n",
        "ax2 = sns.distplot(y_p, hist = False, label = 'y_예측')\n",
        "\n",
        "plot.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "결정계수 R20/uniform/auto: 0.28769877840252456\n",
            "결정계수 R20/uniform/ball_tree: 0.2877047032149218\n",
            "결정계수 R20/uniform/kd_tree: 0.28769877840252456\n",
            "결정계수 R20/uniform/brute: 0.28769877840252456\n",
            "\n",
            "\n",
            "결정계수 R20/distance/auto: 0.2969646763490488\n",
            "결정계수 R20/distance/ball_tree: 0.29697002863788924\n",
            "결정계수 R20/distance/kd_tree: 0.2969646763490488\n",
            "결정계수 R20/distance/brute: 0.2969646763490488\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "결정계수 R30/uniform/auto: 0.2848718746738542\n",
            "결정계수 R30/uniform/ball_tree: 0.28488123398820586\n",
            "결정계수 R30/uniform/kd_tree: 0.2848718746738542\n",
            "결정계수 R30/uniform/brute: 0.2848718746738542\n",
            "\n",
            "\n",
            "결정계수 R30/distance/auto: 0.29445913714191263\n",
            "결정계수 R30/distance/ball_tree: 0.29446759457938376\n",
            "결정계수 R30/distance/kd_tree: 0.29445913714191263\n",
            "결정계수 R30/distance/brute: 0.2944591371419125\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "결정계수 R40/uniform/auto: 0.27206489130498623\n",
            "결정계수 R40/uniform/ball_tree: 0.2720694522180518\n",
            "결정계수 R40/uniform/kd_tree: 0.27206489130498623\n",
            "결정계수 R40/uniform/brute: 0.27207837608149454\n",
            "\n",
            "\n",
            "결정계수 R40/distance/auto: 0.283243073950985\n",
            "결정계수 R40/distance/ball_tree: 0.2832460965440904\n",
            "결정계수 R40/distance/kd_tree: 0.283243073950985\n",
            "결정계수 R40/distance/brute: 0.28325470372051564\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "결정계수 R50/uniform/auto: 0.2619912847967377\n",
            "결정계수 R50/uniform/ball_tree: 0.26199526671440454\n",
            "결정계수 R50/uniform/kd_tree: 0.2619912847967377\n",
            "결정계수 R50/uniform/brute: 0.26199094421481184\n",
            "\n",
            "\n",
            "결정계수 R50/distance/auto: 0.2742058936010411\n",
            "결정계수 R50/distance/ball_tree: 0.2742096271014084\n",
            "결정계수 R50/distance/kd_tree: 0.2742058936010411\n",
            "결정계수 R50/distance/brute: 0.27420553838739026\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "findfont: Font family ['Malgun gothic'] not found. Falling back to DejaVu Sans.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fmkARPJd3csi"
      },
      "source": [
        "regressor = KNeighborsRegressor(n_neighbors = 3, weights = \"distance\")\n",
        "regressor.fit(X_train, y_train)\n",
        "guesses = regressor.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rIwEUQSs6CfC"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MChzmBXE54bW",
        "outputId": "f36a48d4-fa6d-4476-af96-cca52e23f9d4"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    }
  ]
}